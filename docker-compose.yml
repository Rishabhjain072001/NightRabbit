version: "3.8"

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    pull_policy: always
    volumes:
      - .:/app
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - RAILS_ENV=${RAILS_ENV}
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - VIDEO_SCRAPING_ENDPOINT=${VIDEO_SCRAPING_ENDPOINT}
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - REDIS_URL=${REDIS_URL}
    depends_on:
      - frontend
      - elasticsearch
      - redis
      - sidekiq

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/frontend
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
    networks:
      - app-network
    volumes:
      - elastic_data:/usr/share/elasticsearch/data

  redis:
    image: redis:latest
    ports:
      - "6381:6379"
    networks:
      - app-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  sidekiq:
    build:
      context: .
      dockerfile: Dockerfile
    command: bundle exec sidekiq
    depends_on:
      - redis
    volumes:
      - .:/app
    environment:
      - REDIS_URL=${REDIS_URL}
      - RAILS_ENV=${RAILS_ENV}
      - DATABASE_URL=${DATABASE_URL}
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  redis_data:
  elastic_data:
